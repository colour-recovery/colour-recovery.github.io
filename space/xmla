<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" version="2.0">
<access:restriction relationship="allow"/>
<channel>
<title>Wikispaces : Colour Recovery Working Group - all changes</title>
<link>http://colour-recovery.wikispaces.com/space/view</link>
<description>All page edits and messages at Wikispaces : Colour Recovery Working Group</description>
<webMaster>help@wikispaces.com (Wikispaces)</webMaster>
<generator>http://www.wikispaces.com</generator>
<ttl>60</ttl>
<atom:link href="http://colour-recovery.wikispaces.com/space/xmla?v=rss_2_0" rel="self" type="application/rss+xml"/>
<image>
<title>Wikispaces : Colour Recovery Working Group - all changes</title>
<url>http://www.wikispaces.com/i/l.png</url>
<link>http://colour-recovery.wikispaces.com/space/view</link>
<width>140</width>
<height>48</height>
<description>Wikispaces</description>
</image>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/151532243</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/151532243</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Mon, 05 Jul 2010 02:14:59 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>I've not had time to make any further progress tweaking the div and curl settings, in order to achieve a more consistent improvement in CR.<br/> I intend to investigate this further when time allows.<br/> <del class="delete">Suggested modification for Quadrant Editor<br/> One of the major drawbacks still remaining for CR is the multi-coloured strobing that appears during panning shots, and around rapidly moving objects.<br/> (As far as I know this has not yet been solved.)<br/> I've noticed that setting the x and y thresholds to very high values in the CR software eliminates this problem (at least for the footage I've been working on). That's because it turns off quadrant detection altogether.<br/> I concluded from this that the strobing is usually produced by disturbances in the vertical measurement, and not by different colours overlapping between fields.<br/> I suggested some ways to resolve this by filtering the vertical displacement values.<br/> However if these solutions fail, it should be possible to resolve the problem by allowing Quadrant Editor to switch off quadrant detection within a defined region of the frame (i.e. in the area where strobing occurs).<br/> If all the colours in that region are from the same quadrant, then the problem is effectively solved.<br/> If they're from different quadrants, then each picture element could be adjusted with Quadrant Editor in the usual way.<br/> It would be a laborious process, but I think it may well resolve the problem should all else fail.<br/> (For all I know this feature may already be included within Quadrant Editor: so apologies if it is!)</del><br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/151418749</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/151418749</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 03 Jul 2010 02:17:26 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>MergeChroma(lumavid, chromavid)<br/> I'm pleased to say the geometry seemed to line up very well indeed, and I was very happy with the end result.<br/> <ins class="insert">I noticed some minor colour-bleed; but this was already present on the original domestic VT.<br/> There are also some intermittent problems on the extreme right and left margins of frame, where the colour twitches in and out of alignment. These would probably have to be trimmed off as they're an unavoidable consequence of the pattern-matching process.</ins><br/> Conforming the FR to the VT<br/> I've not had time to make any further progress tweaking the div and curl settings, in order to achieve a more consistent improvement in CR.<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/151417901</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/151417901</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 03 Jul 2010 01:59:07 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>I concluded from this that the strobing is usually produced by disturbances in the vertical measurement, and not by different colours overlapping between fields.<br/> I suggested some ways to resolve this by filtering the vertical displacement values.<br/> <div class="blockHeader">...</div> of the <del class="delete">frame.</del><ins class="insert">frame (i.e. in the area where strobing occurs).</ins><br/> If all the colours in that region are from the same quadrant, then the problem is effectively solved.<br/> If they're from different quadrants, then each picture element could be adjusted with Quadrant Editor in the usual way.<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/151417813</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/151417813</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 03 Jul 2010 01:56:41 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>However if these solutions fail, it should be possible to resolve the problem by allowing Quadrant Editor to switch off quadrant detection within a defined region of the frame.<br/> If all the colours in that region are from the same quadrant, then the problem is effectively solved.<br/> <div class="blockHeader">...</div> from different <del class="delete">quadrants</del><ins class="insert">quadrants,</ins> then each<div class="blockHeader">...</div> the problem <del class="delete">if</del><ins class="insert">should</ins> all else <del class="delete">fails.</del><ins class="insert">fail.<br/> (For all I know this feature may already be included within Quadrant Editor: so apologies if it is!)</ins><br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/151417483</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/151417483</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 03 Jul 2010 01:49:30 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>{Ripple_V_1.jpg} <br/> {Ripple_V_2.jpg} <br/> <ins class="insert">2nd July 2010<br/> Discovered a problem with the png input format: it seems to be producing the same black level fluctuations I've seen previously with other input formats. So I've had to go back to using tiff sequences for 8-bit processing.<br/> Conforming the VT to the FR<br/> Today I concluded my experiment to match a domestic colour VT to the corresponding FR in a frame-by-frame process.<br/> I had assumed this would slow down processing because it requires 24-bit image sequences (obviously!); but then I realised there was no reason to process in 1080X1920, since 576X720 is perfectly adequate.<br/> With this lower resolution, processing times are speeded up to around 36 seconds per frame on my PC (at least 4 times faster on a more up to date PC).<br/> (N.B. An added benefit to 24-bit processing is that there are no input format issues.)<br/> Initially ImageJ produced quite a lot of errors in the geometry of the output frames, with some very odd distortions appearing!<br/> I solved this by adjusting the div and curl constraints to maximum, which fully resolved the issue.<br/> I combined the colour output sequence with the original FR using the following AviSynth script:<br/> ImageSource(&quot;F:\FR (SD)(24 bit)(mask 2)\%d.bmp&quot;, 3, 722)<br/> lumavid = ConvertToYV12()<br/> ImageSource(&quot;F:\Output\%d.bmp&quot;, 3, 722)<br/> chromavid = ConvertToYV12()<br/> MergeChroma(lumavid, chromavid)<br/> I'm pleased to say the geometry seemed to line up very well indeed, and I was very happy with the end result.<br/> Conforming the FR to the VT<br/> I've not had time to make any further progress tweaking the div and curl settings, in order to achieve a more consistent improvement in CR.<br/> I intend to investigate this further when time allows.<br/> Suggested modification for Quadrant Editor<br/> One of the major drawbacks still remaining for CR is the multi-coloured strobing that appears during panning shots, and around rapidly moving objects.<br/> (As far as I know this has not yet been solved.)<br/> I've noticed that setting the x and y thresholds to very high values in the CR software eliminates this problem (at least for the footage I've been working on). That's because it turns off quadrant detection altogether.<br/> I concluded from this that the strobing is usually produced by disturbances in the vertical measurement, and not by different colours overlapping between fields.<br/> I suggested some ways to resolve this by filtering the vertical displacement values.<br/> However if these solutions fail, it should be possible to resolve the problem by allowing Quadrant Editor to switch off quadrant detection within a defined region of the frame.<br/> If all the colours in that region are from the same quadrant, then the problem is effectively solved.<br/> If they're from different quadrants then each picture element could be adjusted with Quadrant Editor in the usual way.<br/> It would be a laborious process, but I think it may well resolve the problem if all else fails.</ins><br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135304471</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135304471</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Mon, 19 Apr 2010 02:54:51 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>All these sources of positional instability produce a rapid flexing of the geometry that would be disturbing for the viewer.<br/> There are three possible solutions:<br/> <div class="blockHeader">...</div> the viewer.<ins class="insert"> (This would require processing in 24 bit RGB, which would be slow.)</ins><br/> 2) Apply film stabilisation to both the VT and FR prior to processing. This would most likely have a negative effect on CR, but this wouldn't matter if you just wanted to do VT colour overlay.<br/> 3) Constrain the div and curl derivatives of the undistort vector field. (These measure the amount of divergence and curvature in the field respectively.)<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135036695</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135036695</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 05:21:53 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>Previously I've tried filtering the displacement values by calculating a running-average; but since that's a 1D filter it's less likely to be effective.<br/> Another possibility is to try filtering in the frequency domain.<br/> I've noticed<del class="delete"> during panning shots</del> that lots<div class="blockHeader">...</div> vector field<ins class="insert"> during panning shots</ins> (caused by<br/> Alternatively you could constrain the partial derivatives of the scalar fields.<br/> Here is an example of the ripple introduced when the fields are different.<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135036525</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135036525</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 05:18:32 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>N.B. The line j = i + 49 is required because there is a 49 frame offset in the numbering used for the FR and VT sequences.<br/> Applications of vector and scalar field constraints in CR<br/> <div class="blockHeader">...</div> CR is <del class="delete">getting</del><ins class="insert">to get</ins> rid of<br/> I've noticed these usually arise not from two different colours overlapping and mixing between the fields; but rather the disturbance in vertical and horizontal displacement values caused by the phase rotation of the vertical measurement.<br/> It may be possible to filter the displacement values to remove these disturbances.<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135036469</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135036469</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 05:17:01 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>Since this is not very convenient I tried using 8-bit png format for the image sequences, and this worked perfectly, producing 8-bit output png's that can be directly combined into a raw video-stream. Processing times were circa 1.25 - 1.5 minutes per frame depending on the processing settings used.<br/> Effect on CR<br/> <div class="blockHeader">...</div> of the <del class="delete">CR,</del><ins class="insert">FR,</ins> based on<br/> I then performed CR on the raw FR, the simple undistort of the FR, and the frame-by-frame undistorted version.<br/> Since the idea of frame-by-frame processing is to reduce the amount of manual intervention required, I unchecked the &quot;Quadrant Prompt&quot; option in all cases.<br/> Scene 2 of the footage was particularly problematic for the CR process. The raw footage failed completely to get the right quadrants. The simple undistort produced some improvement; but I was pleased to discover that the frame-by-frame process produced by far the best result. Nearly all the quadrants were correctly selected without any manual intervention.<br/> <div class="blockHeader">...</div> moving actor<ins class="insert"> close-up</ins> in the<br/> So it may turn out my frame-by-frame process is only useful for improving CR in certain problem scenes.<br/> Geometric differences between the domestic VT and the original broadcast VT<br/> <div class="blockHeader">...</div> be more<ins class="insert"> pronounced</ins> than I<br/> The line-blanking interval on the domestic VT appeared to have been increased and was eating into the active picture content on the right-hand-side of frame. I assume this may have been the result of the PAL-NTSC-PAL conversions?<br/> <div class="blockHeader">...</div> the line <del class="delete">timing.</del><ins class="insert">timing, and possibly some wow-and-flutter variations from the VT scanner.</ins><br/> To match the original broadcast VT geometry an additional 2nd-pass transformation would be needed.<br/> This may possibly make the footage more CR-friendly still.<br/> <div class="blockHeader">...</div>Unfortunately a side-effect of my frame-by-frame process, is an undesirable rapid fluctuation in geometry on low texture areas, and around the edges of the frame.<br/> The test sequence I'm using is particularly problematic, since it originated from location footage.<br/> <div class="blockHeader">...</div> prone to <del class="delete">weave</del><ins class="insert">bounce</ins> and <del class="delete">bounce,</del><ins class="insert">weave,</ins> due to<br/> 1) The film camera used on location.<br/> 2) The original 1970's telecine playout of the location footage.<br/> 3) The film camera used in the film recording.<br/> 4) The more recent HD telecine transfer (though this should be more stable with modern equipment).<br/> <div class="blockHeader">...</div> produce a <del class="delete">lot</del><ins class="insert">rapid flexing</ins> of<del class="delete"> changes in geometry on</del> the <del class="delete">frame-by-frame undistort,</del><ins class="insert">geometry</ins> that would<br/> There are three possible solutions:<br/> <div class="blockHeader">...</div> domestic VT<ins class="insert"> frame-by-frame</ins> to match<div class="blockHeader">...</div> onto the<del class="delete"> b&amp;w</del> FR. Changes<br/> 2) Apply film stabilisation to both the VT and FR prior to processing. This would most likely have a negative effect on CR, but this wouldn't matter if you just wanted to do VT colour overlay.<br/> <div class="blockHeader">...</div> vector field.<ins class="insert"> (These measure the amount of divergence and curvature in the field respectively.)</ins><br/> I've experimented with <del class="delete">the</del><ins class="insert">this</ins> last method,<br/> Am currently trying to find the best compromise settings, to get both good stability and good CR.<br/> <div class="blockHeader">...</div> but this <del class="delete">appeared</del><ins class="insert">appears</ins> to have<div class="blockHeader">...</div> pattern-recognition process, <del class="delete">and it</del><ins class="insert">which</ins> was still<div class="blockHeader">...</div> ended up <del class="delete">using</del><ins class="insert">with</ins> after all<br/> dirf = getDirectory(&quot;Choose FR directory &quot;);<br/> dirv = getDirectory(&quot;Choose VT directory &quot;);<br/> <div class="blockHeader">...</div>Applications of vector and scalar field constraints in CR<br/> The biggest remaining problem with CR is getting rid of the quadrant errors when there is motion that results in differences between the fields.<br/> <div class="blockHeader">...</div> noticed these <del class="delete">usualy</del><ins class="insert">usually</ins> arise not<br/> It may be possible to filter the displacement values to remove these disturbances.<br/> <div class="blockHeader">...</div> values for <del class="delete">errors,</del><ins class="insert">errors</ins> is to<div class="blockHeader">...</div> vector field<ins class="insert"> prior to generating a quadrant map,</ins> will reduce<br/> Since curl is itself a vector field, you would probably want to constrain the magnitude of the curl vectors.<br/> The div however, is a scalar field, and therefore you can constrain it directly.<br/> <div class="blockHeader">...</div> displacement values <del class="delete">with</del><ins class="insert">by calculating a</ins> running-average; but<div class="blockHeader">...</div> effective.<br/> Another <del class="delete">idea I had was</del><ins class="insert">possibility is</ins> to try filtering<del class="delete"> the</del> in the frequency domain.<del class="delete"> I've</del><ins class="insert"><br/> I've</ins> noticed<ins class="insert"> during panning shots</ins> that<del class="delete"> when you have a panning shot,</del> lots of<div class="blockHeader">...</div> vertical measurement).<del class="delete"><br/> By</del><ins class="insert"> By</ins> splitting the<div class="blockHeader">...</div> frequency domain <del class="delete">filtering on each.</del><ins class="insert">filtering.</ins><br/> Alternatively you could constrain the partial derivatives of the scalar fields.<br/> Here is an example of the ripple introduced when the fields are different.<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135035235</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135035235</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 04:50:53 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>I could generate this transform from the chroma; but unfortunately the frame-by-frame pattern-matching produces variations in areas of low texture around the edges of frame, so the 2nd-pass transformation needed would not remain constant across the footage.<br/> Here is an example of the horizontal and vertical distortion remaining after the frame-by-frame processing:<br/> <ins class="insert">{262_(H).jpg} Horiz distortion<br/> {262_(V).jpg} Vert distortion</ins><br/> Geometric fluctuations<br/> Unfortunately a side-effect of my frame-by-frame process, is an undesirable rapid fluctuation in geometry on low texture areas, and around the edges of the frame.<br/> <div class="blockHeader">...</div>Alternatively you could constrain the partial derivatives of the scalar fields.<br/> Here is an example of the ripple introduced when the fields are different.<br/> The first <del class="delete">images show</del><ins class="insert">image shows</ins> the<ins class="insert"> vertical</ins> displacement maps<div class="blockHeader">...</div> the next <del class="delete">two images show</del><ins class="insert">image shows</ins> what happens<del class="delete"> immediately</del> after the<div class="blockHeader">...</div> to pan:<ins class="insert"><br/> {Ripple_V_1.jpg} <br/> {Ripple_V_2.jpg} </ins><br/> </description>
</item>
<item>
<title>Ripple_V_1.jpg</title>
<link>http://colour-recovery.wikispaces.com/file/detail/Ripple_V_1.jpg</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/file/detail/Ripple_V_1.jpg</guid>
<comments/>
<pubDate>Sat, 17 Apr 2010 04:46:38 GMT</pubDate>
<description>Uploaded</description>
<enclosure url="http://colour-recovery.wikispaces.com/file/view/Ripple_V_1.jpg" length="167613" type="image/jpeg"/>
</item>
<item>
<title>Ripple_V_2.jpg</title>
<link>http://colour-recovery.wikispaces.com/file/detail/Ripple_V_2.jpg</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/file/detail/Ripple_V_2.jpg</guid>
<comments/>
<pubDate>Sat, 17 Apr 2010 04:46:38 GMT</pubDate>
<description>Uploaded</description>
<enclosure url="http://colour-recovery.wikispaces.com/file/view/Ripple_V_2.jpg" length="178256" type="image/jpeg"/>
</item>
<item>
<title>262_(H).jpg</title>
<link>http://colour-recovery.wikispaces.com/file/detail/262_%28H%29.jpg</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/file/detail/262_%28H%29.jpg</guid>
<comments/>
<pubDate>Sat, 17 Apr 2010 04:46:18 GMT</pubDate>
<description>Uploaded</description>
<enclosure url="http://colour-recovery.wikispaces.com/file/view/262_%28H%29.jpg" length="178559" type="image/jpeg"/>
</item>
<item>
<title>262_(V).jpg</title>
<link>http://colour-recovery.wikispaces.com/file/detail/262_%28V%29.jpg</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/file/detail/262_%28V%29.jpg</guid>
<comments/>
<pubDate>Sat, 17 Apr 2010 04:46:18 GMT</pubDate>
<description>Uploaded</description>
<enclosure url="http://colour-recovery.wikispaces.com/file/view/262_%28V%29.jpg" length="183572" type="image/jpeg"/>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135033711</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135033711</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 04:19:55 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>N.B. The line j = i + 49 is required because there is a 49 frame offset in the numbering used for the FR and VT sequences.<br/> Applications of vector and scalar field constraints in CR<br/> <ins class="insert">The biggest remaining problem with CR is getting rid of the quadrant errors when there is motion that results in differences between the fields.<br/> I've noticed these usualy arise not from two different colours overlapping and mixing between the fields; but rather the disturbance in vertical and horizontal displacement values caused by the phase rotation of the vertical measurement.<br/> It may be possible to filter the displacement values to remove these disturbances.</ins><br/> Since the distortion in the FR is represented by a 2D vector field, the most natural way to filter the displacement values for errors, is to apply constraints that can act on the vectors directly.<br/> So it may well turn out that constraining the div and curl of the vector field will reduce the number of quadrant errors.<br/> <div class="blockHeader">...</div>The div however, is a scalar field, and therefore you can constrain it directly.<br/> Previously I've tried filtering the displacement values with running-average; but since that's a 1D filter it's less likely to be effective.<br/> <div class="blockHeader">...</div> the vector <del class="delete">field.</del><ins class="insert">field (caused by the phase disturbances in the vertical measurement).</ins><br/> By splitting the vector field into horizontal and vertical scalar fields, and applying FFT's, it may be possible to remove this ripple using 2D frequency domain filtering on each.<br/> Alternatively you could constrain the partial derivatives of the scalar fields.<br/> <div class="blockHeader">...</div> ripple introduced <del class="delete">by a panning camera-shot.</del><ins class="insert">when the fields are different.</ins><br/> The first images show the displacement maps for the locked-off shot immediately before the camera pans, and the next two images show what happens immediately after the camera starts to pan:<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135033363</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135033363</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 04:12:36 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>So I masked off the head-switching area of the VT, as well as a small slither at the top of frame.<br/> I also masked off the right-hand-side of the FR, since (surprisingly) it contained more active picture content than the VT in that region.<br/> <ins class="insert">(I achived this using multiple instances of the &quot;fill&quot; filter in Virtual Dub.)</ins><br/> This solved the problem, and the pattern-matching began to work well.<br/> Input format<br/> <div class="blockHeader">...</div>I could generate this transform from the chroma; but unfortunately the frame-by-frame pattern-matching produces variations in areas of low texture around the edges of frame, so the 2nd-pass transformation needed would not remain constant across the footage.<br/> Here is an example of the horizontal and vertical distortion remaining after the frame-by-frame processing:<br/> <del class="delete">sdfgfsd<br/> fdsfg</del><ins class="insert">Geometric fluctuations<br/> Unfortunately a side-effect of my frame-by-frame process, is an undesirable rapid fluctuation in geometry on low texture areas, and around the edges of the frame.<br/> The test sequence I'm using is particularly problematic, since it originated from location footage.<br/> This makes it particularly prone to weave and bounce, due to the following sources:<br/> 1) The film camera used on location.<br/> 2) The original 1970's telecine playout of the location footage.<br/> 3) The film camera used in the film recording.<br/> 4) The more recent HD telecine transfer (though this should be more stable with modern equipment).<br/> All these sources of positional instability produce a lot of changes in geometry on the frame-by-frame undistort, that would be disturbing for the viewer.<br/> There are three possible solutions:<br/> 1) Deform the domestic VT to match the FR. This would be useless for CR; but could be useful when using the VT to overlay colour onto the b&amp;w FR. Changes in the geometry of the chroma in untextured areas would not be very noticeable to the viewer.<br/> 2) Apply film stabilisation to both the VT and FR prior to processing. This would most likely have a negative effect on CR, but this wouldn't matter if you just wanted to do VT colour overlay.<br/> 3) Constrain the div and curl derivatives of the undistort vector field.<br/> I've experimented with the last method, and found that applying the maximum constraints produces a big improvement in geometric stability; but has a very negative effect on CR.<br/> Am currently trying to find the best compromise settings, to get both good stability and good CR.<br/> This field sequence of this particular test footage was out-of-phase; but this appeared to have had little impact on the pattern-recognition process, and it was still able to get a good cross-match between the FR and VT frames.<br/> The Undistort Macro I ended up using after all these changes, was the following:<br/> dirf = getDirectory(&quot;Choose FR directory &quot;);<br/> dirv = getDirectory(&quot;Choose VT directory &quot;);<br/> diro = getDirectory(&quot;Choose output directory &quot;);<br/> for (i = 10; i &lt; 1025; i++)<br/> {<br/> j = i + 49;<br/> open(dirv+i+&quot;.png&quot;);<br/> open(dirf+j+&quot;.png&quot;);<br/> run(&quot;bUnwarpJ&quot;, &quot;registration=Mono image_subsample_factor=0 initial_deformation=[Very Coarse] final_deformation=[Fine] divergence_weight=1 curl_weight=1 landmark_weight=0 image_weight=1 stop_threshold=0.01&quot;);<br/> save(diro+i+&quot;.png&quot;);<br/> close();<br/> close();<br/> close();<br/> }<br/> N.B. The line j = i + 49 is required because there is a 49 frame offset in the numbering used for the FR and VT sequences.<br/> Applications of vector and scalar field constraints in CR<br/> Since the distortion in the FR is represented by a 2D vector field, the most natural way to filter the displacement values for errors, is to apply constraints that can act on the vectors directly.<br/> So it may well turn out that constraining the div and curl of the vector field will reduce the number of quadrant errors.<br/> Since curl is itself a vector field, you would probably want to constrain the magnitude of the curl vectors.<br/> The div however, is a scalar field, and therefore you can constrain it directly.<br/> Previously I've tried filtering the displacement values with running-average; but since that's a 1D filter it's less likely to be effective.<br/> Another idea I had was to try filtering the in the frequency domain. I've noticed that when you have a panning shot, lots of ripples appear in the vector field.<br/> By splitting the vector field into horizontal and vertical scalar fields, and applying FFT's, it may be possible to remove this ripple using 2D frequency domain filtering on each.<br/> Alternatively you could constrain the partial derivatives of the scalar fields.<br/> Here is an example of the ripple introduced by a panning camera-shot.<br/> The first images show the displacement maps for the locked-off shot immediately before the camera pans, and the next two images show what happens immediately after the camera starts to pan:</ins><br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/135031871</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/135031871</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Sat, 17 Apr 2010 03:44:52 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>In this case we have the opposite situation: we know what the beam deflections are in our test frame, and we need to deduce a formula for the electric field. This could then be used to calculate beam deflections for all subsequent frames.<br/> The time evolution of the field depends on the waveforms of the driving voltages for the field coils, which in turn depend on the way that particular film recorder has been adjusted by it's various rheostats. The beam current would also affect the field pattern, because the electron beam itself has a field, and the amount of current drawn by the beam probably affects the power supply to the field coils.<br/> <ins class="insert">17th April 2010<br/> I have now conducted an experiment with my frame-by-frame matching process, using an FR and corresponding domestic VT.<br/> As usual it was harder than I expected it to be!<br/> Cropping problem<br/> The initial results were very poor, and I quickly discovered that the variable cropping was confusing the pattern-matching process.<br/> So I masked off the head-switching area of the VT, as well as a small slither at the top of frame.<br/> I also masked off the right-hand-side of the FR, since (surprisingly) it contained more active picture content than the VT in that region.<br/> This solved the problem, and the pattern-matching began to work well.<br/> Input format<br/> The next problem to solve was choosing a suitable format for the image sequences.<br/> I began by using 8-bit bmp's; but this produced an unexplained rapid fluctuation in the black levels on the output sequence.<br/> So I then switched to 24-bit bmp's, which resolved the issue; but led to a glacial 3.3 minutes per frame processing speed!<br/> Next I tried 8-bit tif's, which reduced the processing time to a more acceptable 1.25 minutes per frame.<br/> However the output tif's were about 11 times larger than the inpit tif's, and could only be opened in ImageJ (other image viewers didn't recognise them). Therefore I had to run ImageJ's batch conversion macro and convert them back to bmp format, before I could recombine them into a raw video-stream.<br/> Since this is not very convenient I tried using 8-bit png format for the image sequences, and this worked perfectly, producing 8-bit output png's that can be directly combined into a raw video-stream. Processing times were circa 1.25 - 1.5 minutes per frame depending on the processing settings used.<br/> Effect on CR<br/> As a control for my experiment I created a simple undistorted version of the CR, based on the chroma of one test frame (similar to Richard's undistort solution).<br/> I then performed CR on the raw FR, the simple undistort of the FR, and the frame-by-frame undistorted version.<br/> Since the idea of frame-by-frame processing is to reduce the amount of manual intervention required, I unchecked the &quot;Quadrant Prompt&quot; option in all cases.<br/> Scene 2 of the footage was particularly problematic for the CR process. The raw footage failed completely to get the right quadrants. The simple undistort produced some improvement; but I was pleased to discover that the frame-by-frame process produced by far the best result. Nearly all the quadrants were correctly selected without any manual intervention.<br/> Scene 3 was a different matter, and on this I found the frame-by-frame undistort introduced new errors, with the simple undistort giving the best results. The problem was an area of low texture immediately behind a moving actor in the foreground. As he moved across the frame, he dragged the geometry of the low-texure area with him. The pattern-matching failed because there was no detail for it to lock onto in this low texture area.<br/> So it may turn out my frame-by-frame process is only useful for improving CR in certain problem scenes.<br/> Geometric differences between the domestic VT and the original broadcast VT<br/> These differences turned out to be more than I expected, especially in the horizontal direction.<br/> The line-blanking interval on the domestic VT appeared to have been increased and was eating into the active picture content on the right-hand-side of frame. I assume this may have been the result of the PAL-NTSC-PAL conversions?<br/> There was also some horizontal compression of the line timing.<br/> To match the original broadcast VT geometry an additional 2nd-pass transformation would be needed.<br/> This may possibly make the footage more CR-friendly still.<br/> I could generate this transform from the chroma; but unfortunately the frame-by-frame pattern-matching produces variations in areas of low texture around the edges of frame, so the 2nd-pass transformation needed would not remain constant across the footage.<br/> Here is an example of the horizontal and vertical distortion remaining after the frame-by-frame processing:<br/> sdfgfsd<br/> fdsfg</ins><br/> </description>
</item>
<item>
<title>Members</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Members/130671917</link>
<dc:creator>SteveWhitehouse</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Members/130671917</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Members</comments>
<pubDate>Fri, 26 Mar 2010 20:50:48 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>MusicalDave<br/> 14/01/2009<br/> <ins class="insert">Steve Whitehouse<br/> 25/03/2010</ins><br/> Associate Members<br/> Name<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/125781533</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/125781533</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Mon, 08 Mar 2010 11:02:29 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>The thought occurs that someone with an expertise in CRT design would probably find this quite easy to solve.<br/> When designing a tube, you would presumably have a formula for the electric field E(x,y,z,t,i), and use it to calculate the beam deflections to assess how the linearity performs. (N.B. i = the beam current.)<br/> <div class="blockHeader">...</div> the opposite <del class="delete">situtaion:</del><ins class="insert">situation:</ins> we know<br/> The time evolution of the field depends on the waveforms of the driving voltages for the field coils, which in turn depend on the way that particular film recorder has been adjusted by it's various rheostats. The beam current would also affect the field pattern, because the electron beam itself has a field, and the amount of current drawn by the beam probably affects the power supply to the field coils.<br/> </description>
</item>
<item>
<title>Updates</title>
<link>http://colour-recovery.wikispaces.com/page/diff/Updates/125780035</link>
<dc:creator>alexh110</dc:creator>
<guid isPermaLink="true">http://colour-recovery.wikispaces.com/page/diff/Updates/125780035</guid>
<comments>http://colour-recovery.wikispaces.com/message/list/Updates</comments>
<pubDate>Mon, 08 Mar 2010 10:49:39 GMT</pubDate>
<description><style type="text/css"> ins.insert { background-color: #AFA; color: #080; text-decoration: inherit; } del.delete { background-color: #F88; color: #800; text-decoration: inherit; } </style><div class="blockHeader">...</div>I have concluded that I'm not clever enough to develop a suitable model, even if I had the time (which I don't!)<br/> Perhaps someone else would like to take up the challenge. (As a first step I would try removing the vertical distortion only, and see if I could spot any obvious pattern in the horizontal distortion.)<br/> <ins class="insert">The thought occurs that someone with an expertise in CRT design would probably find this quite easy to solve.<br/> When designing a tube, you would presumably have a formula for the electric field E(x,y,z,t,i), and use it to calculate the beam deflections to assess how the linearity performs. (N.B. i = the beam current.)<br/> In this case we have the opposite situtaion: we know what the beam deflections are in our test frame, and we need to deduce a formula for the electric field. This could then be used to calculate beam deflections for all subsequent frames.<br/> The time evolution of the field depends on the waveforms of the driving voltages for the field coils, which in turn depend on the way that particular film recorder has been adjusted by it's various rheostats. The beam current would also affect the field pattern, because the electron beam itself has a field, and the amount of current drawn by the beam probably affects the power supply to the field coils.</ins><br/> </description>
</item>
</channel>
</rss>